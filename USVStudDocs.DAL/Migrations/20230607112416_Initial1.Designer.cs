// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using USVStudDocs.DAL;

#nullable disable

namespace USVStudDocs.DAL.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20230607112416_Initial1")]
    partial class Initial1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("USVStudDocs.Entities.Authentication.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Admin role",
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Secretary role",
                            Name = "secretary"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Student role",
                            Name = "student"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Analytic role",
                            Name = "analytic"
                        });
                });

            modelBuilder.Entity("USVStudDocs.Entities.Authentication.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("OAuthProvider")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderUserId")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("UserPicture")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("USVStudDocs.Entities.CertificateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("DenyReason")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text");

                    b.Property<int>("SecretaryId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SecretaryId");

                    b.HasIndex("StudentId");

                    b.ToTable("Certificates", (string)null);
                });

            modelBuilder.Entity("USVStudDocs.Entities.EmailSentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmailSent", (string)null);
                });

            modelBuilder.Entity("USVStudDocs.Entities.FacultyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeanId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameShort")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<int>("SecretaryHeadId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeanId");

                    b.HasIndex("SecretaryHeadId");

                    b.ToTable("Faculty", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeanId = 1,
                            Name = "Facultatea de inginerie electrica si stiinta calculatoarelor",
                            NameShort = "FIESC",
                            OrderBy = 1,
                            SecretaryHeadId = 2
                        });
                });

            modelBuilder.Entity("USVStudDocs.Entities.FacultyPersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonType")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("FacultyPerson", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Dan",
                            Patronymic = "",
                            PersonType = 0,
                            Surname = "Milici"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Elena",
                            Patronymic = "",
                            PersonType = 1,
                            Surname = "Curelaru"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Laura",
                            Patronymic = "",
                            PersonType = 2,
                            Surname = "Dospinescu"
                        });
                });

            modelBuilder.Entity("USVStudDocs.Entities.ProgramStudyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldOfStudy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameShort")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<int>("SecretaryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SecretaryId");

                    b.ToTable("ProgramStudy", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FacultyId = 1,
                            FieldOfStudy = 1,
                            Name = "Stiinta si ingineriea calculatoarelor",
                            NameShort = "SIC",
                            OrderBy = 1,
                            SecretaryId = 3
                        });
                });

            modelBuilder.Entity("USVStudDocs.Entities.RegNumberRegistryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("DailyRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LastCertificateNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RegNumberRegistry", (string)null);
                });

            modelBuilder.Entity("USVStudDocs.Entities.SettingsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Settings", (string)null);
                });

            modelBuilder.Entity("USVStudDocs.Entities.Storage.FileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("FileSize")
                        .HasColumnType("numeric");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserSocialId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("USVStudDocs.Entities.StudentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldOfStudy")
                        .HasColumnType("integer");

                    b.Property<int>("FinancialStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<int>("ProgramOfStudyId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("YearSemesterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ProgramOfStudyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("YearSemesterId");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("USVStudDocs.Entities.YearProgramStudyEntity", b =>
                {
                    b.Property<int>("ProgramStudyId")
                        .HasColumnType("integer");

                    b.Property<int>("YearSemesterId")
                        .HasColumnType("integer");

                    b.HasKey("ProgramStudyId", "YearSemesterId");

                    b.HasIndex("ProgramStudyId");

                    b.HasIndex("YearSemesterId");

                    b.ToTable("YearProgramStudy", (string)null);

                    b.HasData(
                        new
                        {
                            ProgramStudyId = 1,
                            YearSemesterId = 5
                        },
                        new
                        {
                            ProgramStudyId = 1,
                            YearSemesterId = 6
                        });
                });

            modelBuilder.Entity("USVStudDocs.Entities.YearSemesterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldOfStudy")
                        .HasColumnType("integer");

                    b.Property<int>("YearNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("YearSemester", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FieldOfStudy = 0,
                            YearNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            FieldOfStudy = 0,
                            YearNumber = 2
                        },
                        new
                        {
                            Id = 3,
                            FieldOfStudy = 0,
                            YearNumber = 3
                        },
                        new
                        {
                            Id = 4,
                            FieldOfStudy = 0,
                            YearNumber = 4
                        },
                        new
                        {
                            Id = 5,
                            FieldOfStudy = 1,
                            YearNumber = 1
                        },
                        new
                        {
                            Id = 6,
                            FieldOfStudy = 1,
                            YearNumber = 2
                        },
                        new
                        {
                            Id = 7,
                            FieldOfStudy = 2,
                            YearNumber = 1
                        },
                        new
                        {
                            Id = 8,
                            FieldOfStudy = 2,
                            YearNumber = 2
                        });
                });

            modelBuilder.Entity("USVStudDocs.Entities.Authentication.UserEntity", b =>
                {
                    b.HasOne("USVStudDocs.Entities.Authentication.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("USVStudDocs.Entities.CertificateEntity", b =>
                {
                    b.HasOne("USVStudDocs.Entities.FacultyPersonEntity", "Secretary")
                        .WithMany()
                        .HasForeignKey("SecretaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USVStudDocs.Entities.StudentEntity", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Secretary");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("USVStudDocs.Entities.FacultyEntity", b =>
                {
                    b.HasOne("USVStudDocs.Entities.FacultyPersonEntity", "Dean")
                        .WithMany("FacultiesDean")
                        .HasForeignKey("DeanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("USVStudDocs.Entities.FacultyPersonEntity", "SecretaryHead")
                        .WithMany("FacultiesSecretaryHead")
                        .HasForeignKey("SecretaryHeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dean");

                    b.Navigation("SecretaryHead");
                });

            modelBuilder.Entity("USVStudDocs.Entities.FacultyPersonEntity", b =>
                {
                    b.HasOne("USVStudDocs.Entities.Authentication.UserEntity", "User")
                        .WithOne("Person")
                        .HasForeignKey("USVStudDocs.Entities.FacultyPersonEntity", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("USVStudDocs.Entities.ProgramStudyEntity", b =>
                {
                    b.HasOne("USVStudDocs.Entities.FacultyEntity", "Faculty")
                        .WithMany("ProgramStudies")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USVStudDocs.Entities.FacultyPersonEntity", "Secretary")
                        .WithMany("ProgramStudies")
                        .HasForeignKey("SecretaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Secretary");
                });

            modelBuilder.Entity("USVStudDocs.Entities.Storage.FileEntity", b =>
                {
                    b.HasOne("USVStudDocs.Entities.Authentication.UserEntity", "User")
                        .WithMany("Files")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("USVStudDocs.Entities.StudentEntity", b =>
                {
                    b.HasOne("USVStudDocs.Entities.FacultyEntity", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USVStudDocs.Entities.ProgramStudyEntity", "ProgramOfStudy")
                        .WithMany()
                        .HasForeignKey("ProgramOfStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USVStudDocs.Entities.Authentication.UserEntity", "User")
                        .WithOne("Student")
                        .HasForeignKey("USVStudDocs.Entities.StudentEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USVStudDocs.Entities.YearSemesterEntity", "YearSemester")
                        .WithMany()
                        .HasForeignKey("YearSemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("ProgramOfStudy");

                    b.Navigation("User");

                    b.Navigation("YearSemester");
                });

            modelBuilder.Entity("USVStudDocs.Entities.YearProgramStudyEntity", b =>
                {
                    b.HasOne("USVStudDocs.Entities.ProgramStudyEntity", "ProgramStudy")
                        .WithMany("YearProgramStudy")
                        .HasForeignKey("ProgramStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USVStudDocs.Entities.YearSemesterEntity", "YearSemester")
                        .WithMany("YearProgramStudy")
                        .HasForeignKey("YearSemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramStudy");

                    b.Navigation("YearSemester");
                });

            modelBuilder.Entity("USVStudDocs.Entities.Authentication.UserEntity", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Person")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("USVStudDocs.Entities.FacultyEntity", b =>
                {
                    b.Navigation("ProgramStudies");
                });

            modelBuilder.Entity("USVStudDocs.Entities.FacultyPersonEntity", b =>
                {
                    b.Navigation("FacultiesDean");

                    b.Navigation("FacultiesSecretaryHead");

                    b.Navigation("ProgramStudies");
                });

            modelBuilder.Entity("USVStudDocs.Entities.ProgramStudyEntity", b =>
                {
                    b.Navigation("YearProgramStudy");
                });

            modelBuilder.Entity("USVStudDocs.Entities.YearSemesterEntity", b =>
                {
                    b.Navigation("YearProgramStudy");
                });
#pragma warning restore 612, 618
        }
    }
}
